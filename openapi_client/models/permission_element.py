# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PermissionElement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authority_id': 'str',
        'name': 'str',
        'access_status': 'str'
    }

    attribute_map = {
        'authority_id': 'authorityId',
        'name': 'name',
        'access_status': 'accessStatus'
    }

    def __init__(self, authority_id=None, name=None, access_status='ALLOWED', local_vars_configuration=None):  # noqa: E501
        """PermissionElement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authority_id = None
        self._name = None
        self._access_status = None
        self.discriminator = None

        if authority_id is not None:
            self.authority_id = authority_id
        if name is not None:
            self.name = name
        if access_status is not None:
            self.access_status = access_status

    @property
    def authority_id(self):
        """Gets the authority_id of this PermissionElement.  # noqa: E501


        :return: The authority_id of this PermissionElement.  # noqa: E501
        :rtype: str
        """
        return self._authority_id

    @authority_id.setter
    def authority_id(self, authority_id):
        """Sets the authority_id of this PermissionElement.


        :param authority_id: The authority_id of this PermissionElement.  # noqa: E501
        :type: str
        """

        self._authority_id = authority_id

    @property
    def name(self):
        """Gets the name of this PermissionElement.  # noqa: E501


        :return: The name of this PermissionElement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PermissionElement.


        :param name: The name of this PermissionElement.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def access_status(self):
        """Gets the access_status of this PermissionElement.  # noqa: E501


        :return: The access_status of this PermissionElement.  # noqa: E501
        :rtype: str
        """
        return self._access_status

    @access_status.setter
    def access_status(self, access_status):
        """Sets the access_status of this PermissionElement.


        :param access_status: The access_status of this PermissionElement.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALLOWED", "DENIED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and access_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `access_status` ({0}), must be one of {1}"  # noqa: E501
                .format(access_status, allowed_values)
            )

        self._access_status = access_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionElement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PermissionElement):
            return True

        return self.to_dict() != other.to_dict()
