# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AuditEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'audit_application_id': 'str',
        'created_by_user': 'UserInfo',
        'created_at': 'datetime',
        'values': 'object'
    }

    attribute_map = {
        'id': 'id',
        'audit_application_id': 'auditApplicationId',
        'created_by_user': 'createdByUser',
        'created_at': 'createdAt',
        'values': 'values'
    }

    def __init__(self, id=None, audit_application_id=None, created_by_user=None, created_at=None, values=None, local_vars_configuration=None):  # noqa: E501
        """AuditEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._audit_application_id = None
        self._created_by_user = None
        self._created_at = None
        self._values = None
        self.discriminator = None

        self.id = id
        self.audit_application_id = audit_application_id
        self.created_by_user = created_by_user
        self.created_at = created_at
        if values is not None:
            self.values = values

    @property
    def id(self):
        """Gets the id of this AuditEntry.  # noqa: E501


        :return: The id of this AuditEntry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditEntry.


        :param id: The id of this AuditEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def audit_application_id(self):
        """Gets the audit_application_id of this AuditEntry.  # noqa: E501


        :return: The audit_application_id of this AuditEntry.  # noqa: E501
        :rtype: str
        """
        return self._audit_application_id

    @audit_application_id.setter
    def audit_application_id(self, audit_application_id):
        """Sets the audit_application_id of this AuditEntry.


        :param audit_application_id: The audit_application_id of this AuditEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and audit_application_id is None:  # noqa: E501
            raise ValueError("Invalid value for `audit_application_id`, must not be `None`")  # noqa: E501

        self._audit_application_id = audit_application_id

    @property
    def created_by_user(self):
        """Gets the created_by_user of this AuditEntry.  # noqa: E501


        :return: The created_by_user of this AuditEntry.  # noqa: E501
        :rtype: UserInfo
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this AuditEntry.


        :param created_by_user: The created_by_user of this AuditEntry.  # noqa: E501
        :type: UserInfo
        """
        if self.local_vars_configuration.client_side_validation and created_by_user is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by_user`, must not be `None`")  # noqa: E501

        self._created_by_user = created_by_user

    @property
    def created_at(self):
        """Gets the created_at of this AuditEntry.  # noqa: E501


        :return: The created_at of this AuditEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuditEntry.


        :param created_at: The created_at of this AuditEntry.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def values(self):
        """Gets the values of this AuditEntry.  # noqa: E501


        :return: The values of this AuditEntry.  # noqa: E501
        :rtype: object
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AuditEntry.


        :param values: The values of this AuditEntry.  # noqa: E501
        :type: object
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditEntry):
            return True

        return self.to_dict() != other.to_dict()
