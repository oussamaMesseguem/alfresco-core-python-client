# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Rating(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'aggregate': 'RatingAggregate',
        'rated_at': 'datetime',
        'my_rating': 'str'
    }

    attribute_map = {
        'id': 'id',
        'aggregate': 'aggregate',
        'rated_at': 'ratedAt',
        'my_rating': 'myRating'
    }

    def __init__(self, id=None, aggregate=None, rated_at=None, my_rating=None, local_vars_configuration=None):  # noqa: E501
        """Rating - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._aggregate = None
        self._rated_at = None
        self._my_rating = None
        self.discriminator = None

        self.id = id
        self.aggregate = aggregate
        if rated_at is not None:
            self.rated_at = rated_at
        if my_rating is not None:
            self.my_rating = my_rating

    @property
    def id(self):
        """Gets the id of this Rating.  # noqa: E501


        :return: The id of this Rating.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rating.


        :param id: The id of this Rating.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def aggregate(self):
        """Gets the aggregate of this Rating.  # noqa: E501


        :return: The aggregate of this Rating.  # noqa: E501
        :rtype: RatingAggregate
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate):
        """Sets the aggregate of this Rating.


        :param aggregate: The aggregate of this Rating.  # noqa: E501
        :type: RatingAggregate
        """
        if self.local_vars_configuration.client_side_validation and aggregate is None:  # noqa: E501
            raise ValueError("Invalid value for `aggregate`, must not be `None`")  # noqa: E501

        self._aggregate = aggregate

    @property
    def rated_at(self):
        """Gets the rated_at of this Rating.  # noqa: E501


        :return: The rated_at of this Rating.  # noqa: E501
        :rtype: datetime
        """
        return self._rated_at

    @rated_at.setter
    def rated_at(self, rated_at):
        """Sets the rated_at of this Rating.


        :param rated_at: The rated_at of this Rating.  # noqa: E501
        :type: datetime
        """

        self._rated_at = rated_at

    @property
    def my_rating(self):
        """Gets the my_rating of this Rating.  # noqa: E501

        The rating. The type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.  # noqa: E501

        :return: The my_rating of this Rating.  # noqa: E501
        :rtype: str
        """
        return self._my_rating

    @my_rating.setter
    def my_rating(self, my_rating):
        """Sets the my_rating of this Rating.

        The rating. The type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.  # noqa: E501

        :param my_rating: The my_rating of this Rating.  # noqa: E501
        :type: str
        """

        self._my_rating = my_rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rating):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Rating):
            return True

        return self.to_dict() != other.to_dict()
