# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Activity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'post_person_id': 'str',
        'id': 'int',
        'site_id': 'str',
        'posted_at': 'datetime',
        'feed_person_id': 'str',
        'activity_summary': 'object',
        'activity_type': 'str'
    }

    attribute_map = {
        'post_person_id': 'postPersonId',
        'id': 'id',
        'site_id': 'siteId',
        'posted_at': 'postedAt',
        'feed_person_id': 'feedPersonId',
        'activity_summary': 'activitySummary',
        'activity_type': 'activityType'
    }

    def __init__(self, post_person_id=None, id=None, site_id=None, posted_at=None, feed_person_id=None, activity_summary=None, activity_type=None, local_vars_configuration=None):  # noqa: E501
        """Activity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._post_person_id = None
        self._id = None
        self._site_id = None
        self._posted_at = None
        self._feed_person_id = None
        self._activity_summary = None
        self._activity_type = None
        self.discriminator = None

        self.post_person_id = post_person_id
        self.id = id
        if site_id is not None:
            self.site_id = site_id
        if posted_at is not None:
            self.posted_at = posted_at
        self.feed_person_id = feed_person_id
        if activity_summary is not None:
            self.activity_summary = activity_summary
        self.activity_type = activity_type

    @property
    def post_person_id(self):
        """Gets the post_person_id of this Activity.  # noqa: E501

        The id of the person who performed the activity  # noqa: E501

        :return: The post_person_id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._post_person_id

    @post_person_id.setter
    def post_person_id(self, post_person_id):
        """Sets the post_person_id of this Activity.

        The id of the person who performed the activity  # noqa: E501

        :param post_person_id: The post_person_id of this Activity.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and post_person_id is None:  # noqa: E501
            raise ValueError("Invalid value for `post_person_id`, must not be `None`")  # noqa: E501

        self._post_person_id = post_person_id

    @property
    def id(self):
        """Gets the id of this Activity.  # noqa: E501

        The unique id of the activity  # noqa: E501

        :return: The id of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.

        The unique id of the activity  # noqa: E501

        :param id: The id of this Activity.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def site_id(self):
        """Gets the site_id of this Activity.  # noqa: E501

        The unique id of the site on which the activity was performed  # noqa: E501

        :return: The site_id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Activity.

        The unique id of the site on which the activity was performed  # noqa: E501

        :param site_id: The site_id of this Activity.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def posted_at(self):
        """Gets the posted_at of this Activity.  # noqa: E501

        The date time at which the activity was performed  # noqa: E501

        :return: The posted_at of this Activity.  # noqa: E501
        :rtype: datetime
        """
        return self._posted_at

    @posted_at.setter
    def posted_at(self, posted_at):
        """Sets the posted_at of this Activity.

        The date time at which the activity was performed  # noqa: E501

        :param posted_at: The posted_at of this Activity.  # noqa: E501
        :type: datetime
        """

        self._posted_at = posted_at

    @property
    def feed_person_id(self):
        """Gets the feed_person_id of this Activity.  # noqa: E501

        The feed on which this activity was posted  # noqa: E501

        :return: The feed_person_id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._feed_person_id

    @feed_person_id.setter
    def feed_person_id(self, feed_person_id):
        """Sets the feed_person_id of this Activity.

        The feed on which this activity was posted  # noqa: E501

        :param feed_person_id: The feed_person_id of this Activity.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and feed_person_id is None:  # noqa: E501
            raise ValueError("Invalid value for `feed_person_id`, must not be `None`")  # noqa: E501

        self._feed_person_id = feed_person_id

    @property
    def activity_summary(self):
        """Gets the activity_summary of this Activity.  # noqa: E501

        An object summarizing the activity  # noqa: E501

        :return: The activity_summary of this Activity.  # noqa: E501
        :rtype: object
        """
        return self._activity_summary

    @activity_summary.setter
    def activity_summary(self, activity_summary):
        """Sets the activity_summary of this Activity.

        An object summarizing the activity  # noqa: E501

        :param activity_summary: The activity_summary of this Activity.  # noqa: E501
        :type: object
        """

        self._activity_summary = activity_summary

    @property
    def activity_type(self):
        """Gets the activity_type of this Activity.  # noqa: E501

        The type of the activity posted  # noqa: E501

        :return: The activity_type of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this Activity.

        The type of the activity posted  # noqa: E501

        :param activity_type: The activity_type of this Activity.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and activity_type is None:  # noqa: E501
            raise ValueError("Invalid value for `activity_type`, must not be `None`")  # noqa: E501

        self._activity_type = activity_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Activity):
            return True

        return self.to_dict() != other.to_dict()
