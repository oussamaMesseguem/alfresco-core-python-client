# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PersonNetwork(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'home_network': 'bool',
        'is_enabled': 'bool',
        'created_at': 'datetime',
        'paid_network': 'bool',
        'subscription_level': 'str',
        'quotas': 'list[NetworkQuota]'
    }

    attribute_map = {
        'id': 'id',
        'home_network': 'homeNetwork',
        'is_enabled': 'isEnabled',
        'created_at': 'createdAt',
        'paid_network': 'paidNetwork',
        'subscription_level': 'subscriptionLevel',
        'quotas': 'quotas'
    }

    def __init__(self, id=None, home_network=None, is_enabled=None, created_at=None, paid_network=None, subscription_level=None, quotas=None, local_vars_configuration=None):  # noqa: E501
        """PersonNetwork - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._home_network = None
        self._is_enabled = None
        self._created_at = None
        self._paid_network = None
        self._subscription_level = None
        self._quotas = None
        self.discriminator = None

        self.id = id
        if home_network is not None:
            self.home_network = home_network
        self.is_enabled = is_enabled
        if created_at is not None:
            self.created_at = created_at
        if paid_network is not None:
            self.paid_network = paid_network
        if subscription_level is not None:
            self.subscription_level = subscription_level
        if quotas is not None:
            self.quotas = quotas

    @property
    def id(self):
        """Gets the id of this PersonNetwork.  # noqa: E501

        This network's unique id  # noqa: E501

        :return: The id of this PersonNetwork.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonNetwork.

        This network's unique id  # noqa: E501

        :param id: The id of this PersonNetwork.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def home_network(self):
        """Gets the home_network of this PersonNetwork.  # noqa: E501

        Is this the home network?  # noqa: E501

        :return: The home_network of this PersonNetwork.  # noqa: E501
        :rtype: bool
        """
        return self._home_network

    @home_network.setter
    def home_network(self, home_network):
        """Sets the home_network of this PersonNetwork.

        Is this the home network?  # noqa: E501

        :param home_network: The home_network of this PersonNetwork.  # noqa: E501
        :type: bool
        """

        self._home_network = home_network

    @property
    def is_enabled(self):
        """Gets the is_enabled of this PersonNetwork.  # noqa: E501


        :return: The is_enabled of this PersonNetwork.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this PersonNetwork.


        :param is_enabled: The is_enabled of this PersonNetwork.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")  # noqa: E501

        self._is_enabled = is_enabled

    @property
    def created_at(self):
        """Gets the created_at of this PersonNetwork.  # noqa: E501


        :return: The created_at of this PersonNetwork.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PersonNetwork.


        :param created_at: The created_at of this PersonNetwork.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def paid_network(self):
        """Gets the paid_network of this PersonNetwork.  # noqa: E501


        :return: The paid_network of this PersonNetwork.  # noqa: E501
        :rtype: bool
        """
        return self._paid_network

    @paid_network.setter
    def paid_network(self, paid_network):
        """Sets the paid_network of this PersonNetwork.


        :param paid_network: The paid_network of this PersonNetwork.  # noqa: E501
        :type: bool
        """

        self._paid_network = paid_network

    @property
    def subscription_level(self):
        """Gets the subscription_level of this PersonNetwork.  # noqa: E501


        :return: The subscription_level of this PersonNetwork.  # noqa: E501
        :rtype: str
        """
        return self._subscription_level

    @subscription_level.setter
    def subscription_level(self, subscription_level):
        """Sets the subscription_level of this PersonNetwork.


        :param subscription_level: The subscription_level of this PersonNetwork.  # noqa: E501
        :type: str
        """
        allowed_values = ["Free", "Standard", "Enterprise"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and subscription_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `subscription_level` ({0}), must be one of {1}"  # noqa: E501
                .format(subscription_level, allowed_values)
            )

        self._subscription_level = subscription_level

    @property
    def quotas(self):
        """Gets the quotas of this PersonNetwork.  # noqa: E501


        :return: The quotas of this PersonNetwork.  # noqa: E501
        :rtype: list[NetworkQuota]
        """
        return self._quotas

    @quotas.setter
    def quotas(self, quotas):
        """Sets the quotas of this PersonNetwork.


        :param quotas: The quotas of this PersonNetwork.  # noqa: E501
        :type: list[NetworkQuota]
        """

        self._quotas = quotas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PersonNetwork):
            return True

        return self.to_dict() != other.to_dict()
