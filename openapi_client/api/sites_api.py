# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class SitesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def approve_site_membership_request(self, site_id, invitee_id, **kwargs):  # noqa: E501
        """Approve a site membership request  # noqa: E501

        Approve a site membership request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_site_membership_request(site_id, invitee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str invitee_id: The invitee user name. (required)
        :param SiteMembershipApprovalBody site_membership_approval_body: Accepting a request to join, optionally, allows assignment of a role to the user. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.approve_site_membership_request_with_http_info(site_id, invitee_id, **kwargs)  # noqa: E501

    def approve_site_membership_request_with_http_info(self, site_id, invitee_id, **kwargs):  # noqa: E501
        """Approve a site membership request  # noqa: E501

        Approve a site membership request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_site_membership_request_with_http_info(site_id, invitee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str invitee_id: The invitee user name. (required)
        :param SiteMembershipApprovalBody site_membership_approval_body: Accepting a request to join, optionally, allows assignment of a role to the user. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'invitee_id', 'site_membership_approval_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_site_membership_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `approve_site_membership_request`")  # noqa: E501
        # verify the required parameter 'invitee_id' is set
        if self.api_client.client_side_validation and ('invitee_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['invitee_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `invitee_id` when calling `approve_site_membership_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501
        if 'invitee_id' in local_var_params:
            path_params['inviteeId'] = local_var_params['invitee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'site_membership_approval_body' in local_var_params:
            body_params = local_var_params['site_membership_approval_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/site-membership-requests/{inviteeId}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_site(self, site_body_create, **kwargs):  # noqa: E501
        """Create a site  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Creates a default site with the given details.  Unless explicitly specified, the site id will be generated from the site title. The site id must be unique and only contain alphanumeric and/or dash characters.  Note: the id of a site cannot be updated once the site has been created.  For example, to create a public site called \"Marketing\" the following body could be used: ```JSON {   \"title\": \"Marketing\",   \"visibility\": \"PUBLIC\" } ```  The creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.  **Note:** if skipped then such a site will **not** work within Share.  The addition of the site to the user's site favorites can be skipped via the **skipAddToFavorites** query parameter.  The creator will be added as a member with Site Manager role.  When you create a site, a container called **documentLibrary** is created for you in the new site.  This container is the root folder for content stored in the site.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site(site_body_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SiteBodyCreate site_body_create: The site details (required)
        :param bool skip_configuration: Flag to indicate whether the Share-specific (surf) configuration files for the site should not be created.
        :param bool skip_add_to_favorites: Flag to indicate whether the site should not be added to the user's site favorites.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_site_with_http_info(site_body_create, **kwargs)  # noqa: E501

    def create_site_with_http_info(self, site_body_create, **kwargs):  # noqa: E501
        """Create a site  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Creates a default site with the given details.  Unless explicitly specified, the site id will be generated from the site title. The site id must be unique and only contain alphanumeric and/or dash characters.  Note: the id of a site cannot be updated once the site has been created.  For example, to create a public site called \"Marketing\" the following body could be used: ```JSON {   \"title\": \"Marketing\",   \"visibility\": \"PUBLIC\" } ```  The creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.  **Note:** if skipped then such a site will **not** work within Share.  The addition of the site to the user's site favorites can be skipped via the **skipAddToFavorites** query parameter.  The creator will be added as a member with Site Manager role.  When you create a site, a container called **documentLibrary** is created for you in the new site.  This container is the root folder for content stored in the site.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_with_http_info(site_body_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SiteBodyCreate site_body_create: The site details (required)
        :param bool skip_configuration: Flag to indicate whether the Share-specific (surf) configuration files for the site should not be created.
        :param bool skip_add_to_favorites: Flag to indicate whether the site should not be added to the user's site favorites.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_body_create', 'skip_configuration', 'skip_add_to_favorites', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_site" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_body_create' is set
        if self.api_client.client_side_validation and ('site_body_create' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_body_create'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_body_create` when calling `create_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip_configuration' in local_var_params and local_var_params['skip_configuration'] is not None:  # noqa: E501
            query_params.append(('skipConfiguration', local_var_params['skip_configuration']))  # noqa: E501
        if 'skip_add_to_favorites' in local_var_params and local_var_params['skip_add_to_favorites'] is not None:  # noqa: E501
            query_params.append(('skipAddToFavorites', local_var_params['skip_add_to_favorites']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'site_body_create' in local_var_params:
            body_params = local_var_params['site_body_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_site_membership(self, site_id, site_membership_body_create, **kwargs):  # noqa: E501
        """Create a site membership  # noqa: E501

        Creates a site membership for person **personId** on site **siteId**.  You can set the **role** to one of four types:  * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager  **Note:** You can create more than one site membership by  specifying a list of people in the JSON body like this:  ```JSON [   {     \"role\": \"SiteConsumer\",     \"id\": \"joe\"   },   {     \"role\": \"SiteConsumer\",     \"id\": \"fred\"   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_membership(site_id, site_membership_body_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param SiteMembershipBodyCreate site_membership_body_create: The person to add and their role (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteMemberEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_site_membership_with_http_info(site_id, site_membership_body_create, **kwargs)  # noqa: E501

    def create_site_membership_with_http_info(self, site_id, site_membership_body_create, **kwargs):  # noqa: E501
        """Create a site membership  # noqa: E501

        Creates a site membership for person **personId** on site **siteId**.  You can set the **role** to one of four types:  * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager  **Note:** You can create more than one site membership by  specifying a list of people in the JSON body like this:  ```JSON [   {     \"role\": \"SiteConsumer\",     \"id\": \"joe\"   },   {     \"role\": \"SiteConsumer\",     \"id\": \"fred\"   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_membership_with_http_info(site_id, site_membership_body_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param SiteMembershipBodyCreate site_membership_body_create: The person to add and their role (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteMemberEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'site_membership_body_create', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_site_membership" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `create_site_membership`")  # noqa: E501
        # verify the required parameter 'site_membership_body_create' is set
        if self.api_client.client_side_validation and ('site_membership_body_create' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_membership_body_create'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_membership_body_create` when calling `create_site_membership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'site_membership_body_create' in local_var_params:
            body_params = local_var_params['site_membership_body_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteMemberEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_site_membership_request_for_person(self, person_id, site_membership_request_body_create, **kwargs):  # noqa: E501
        """Create a site membership request  # noqa: E501

        Create a site membership request for yourself on the site with the identifier of **id**, specified in the JSON body.  The result of the request differs depending on the type of site.  * For a **public** site, you join the site immediately as a SiteConsumer. * For a **moderated** site, your request is added to the site membership request list. The request waits for approval from the Site Manager. * You cannot request membership of a **private** site. Members are invited by the site administrator.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   **Note:** You can create site membership requests for more than one site by  specifying a list of sites in the JSON body like this:  ```JSON [   {     \"message\": \"Please can you add me\",     \"id\": \"test-site-1\",     \"title\": \"Request for test site 1\",   },   {     \"message\": \"Please can you add me\",     \"id\": \"test-site-2\",     \"title\": \"Request for test site 2\",   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_membership_request_for_person(person_id, site_membership_request_body_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param SiteMembershipRequestBodyCreate site_membership_request_body_create: Site membership request details (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteMembershipRequestEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_site_membership_request_for_person_with_http_info(person_id, site_membership_request_body_create, **kwargs)  # noqa: E501

    def create_site_membership_request_for_person_with_http_info(self, person_id, site_membership_request_body_create, **kwargs):  # noqa: E501
        """Create a site membership request  # noqa: E501

        Create a site membership request for yourself on the site with the identifier of **id**, specified in the JSON body.  The result of the request differs depending on the type of site.  * For a **public** site, you join the site immediately as a SiteConsumer. * For a **moderated** site, your request is added to the site membership request list. The request waits for approval from the Site Manager. * You cannot request membership of a **private** site. Members are invited by the site administrator.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   **Note:** You can create site membership requests for more than one site by  specifying a list of sites in the JSON body like this:  ```JSON [   {     \"message\": \"Please can you add me\",     \"id\": \"test-site-1\",     \"title\": \"Request for test site 1\",   },   {     \"message\": \"Please can you add me\",     \"id\": \"test-site-2\",     \"title\": \"Request for test site 2\",   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_membership_request_for_person_with_http_info(person_id, site_membership_request_body_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param SiteMembershipRequestBodyCreate site_membership_request_body_create: Site membership request details (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteMembershipRequestEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'site_membership_request_body_create', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_site_membership_request_for_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `create_site_membership_request_for_person`")  # noqa: E501
        # verify the required parameter 'site_membership_request_body_create' is set
        if self.api_client.client_side_validation and ('site_membership_request_body_create' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_membership_request_body_create'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_membership_request_body_create` when calling `create_site_membership_request_for_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'site_membership_request_body_create' in local_var_params:
            body_params = local_var_params['site_membership_request_body_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/people/{personId}/site-membership-requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteMembershipRequestEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_site(self, site_id, **kwargs):  # noqa: E501
        """Delete a site  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the site with **siteId**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param bool permanent: Flag to indicate whether the site should be permanently deleted i.e. bypass the trashcan.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_site_with_http_info(site_id, **kwargs)  # noqa: E501

    def delete_site_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Delete a site  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the site with **siteId**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param bool permanent: Flag to indicate whether the site should be permanently deleted i.e. bypass the trashcan.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'permanent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `delete_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []
        if 'permanent' in local_var_params and local_var_params['permanent'] is not None:  # noqa: E501
            query_params.append(('permanent', local_var_params['permanent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_site_membership(self, site_id, person_id, **kwargs):  # noqa: E501
        """Delete a site membership  # noqa: E501

        Deletes person **personId** as a member of site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_membership(site_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str person_id: The identifier of a person. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_site_membership_with_http_info(site_id, person_id, **kwargs)  # noqa: E501

    def delete_site_membership_with_http_info(self, site_id, person_id, **kwargs):  # noqa: E501
        """Delete a site membership  # noqa: E501

        Deletes person **personId** as a member of site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_membership_with_http_info(site_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str person_id: The identifier of a person. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site_membership" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `delete_site_membership`")  # noqa: E501
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `delete_site_membership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/members/{personId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_site_membership_for_person(self, person_id, site_id, **kwargs):  # noqa: E501
        """Delete a site membership  # noqa: E501

        Deletes person **personId** as a member of site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_membership_for_person(person_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_site_membership_for_person_with_http_info(person_id, site_id, **kwargs)  # noqa: E501

    def delete_site_membership_for_person_with_http_info(self, person_id, site_id, **kwargs):  # noqa: E501
        """Delete a site membership  # noqa: E501

        Deletes person **personId** as a member of site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_membership_for_person_with_http_info(person_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site_membership_for_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `delete_site_membership_for_person`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `delete_site_membership_for_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/people/{personId}/sites/{siteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_site_membership_request_for_person(self, person_id, site_id, **kwargs):  # noqa: E501
        """Delete a site membership request  # noqa: E501

        Deletes the site membership request to site **siteId** for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_membership_request_for_person(person_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_site_membership_request_for_person_with_http_info(person_id, site_id, **kwargs)  # noqa: E501

    def delete_site_membership_request_for_person_with_http_info(self, person_id, site_id, **kwargs):  # noqa: E501
        """Delete a site membership request  # noqa: E501

        Deletes the site membership request to site **siteId** for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_membership_request_for_person_with_http_info(person_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site_membership_request_for_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `delete_site_membership_request_for_person`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `delete_site_membership_request_for_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/people/{personId}/site-membership-requests/{siteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site(self, site_id, **kwargs):  # noqa: E501
        """Get a site  # noqa: E501

        Gets information for site **siteId**.  You can use the **relations** parameter to include one or more related entities in a single response and so reduce network traffic.  The entity types in Alfresco are organized in a tree structure. The **sites** entity has two children, **containers** and **members**. The following relations parameter returns all the container and member objects related to the site **siteId**:  ``` containers,members ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param list[str] relations: Use the relations parameter to include one or more related entities in a single response.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_site_with_http_info(site_id, **kwargs)  # noqa: E501

    def get_site_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Get a site  # noqa: E501

        Gets information for site **siteId**.  You can use the **relations** parameter to include one or more related entities in a single response and so reduce network traffic.  The entity types in Alfresco are organized in a tree structure. The **sites** entity has two children, **containers** and **members**. The following relations parameter returns all the container and member objects related to the site **siteId**:  ``` containers,members ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param list[str] relations: Use the relations parameter to include one or more related entities in a single response.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'relations', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `get_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []
        if 'relations' in local_var_params and local_var_params['relations'] is not None:  # noqa: E501
            query_params.append(('relations', local_var_params['relations']))  # noqa: E501
            collection_formats['relations'] = 'csv'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_container(self, site_id, container_id, **kwargs):  # noqa: E501
        """Get a site container  # noqa: E501

        Gets information on the container **containerId** in site **siteId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_container(site_id, container_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str container_id: The unique identifier of a site container. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteContainerEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_site_container_with_http_info(site_id, container_id, **kwargs)  # noqa: E501

    def get_site_container_with_http_info(self, site_id, container_id, **kwargs):  # noqa: E501
        """Get a site container  # noqa: E501

        Gets information on the container **containerId** in site **siteId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_container_with_http_info(site_id, container_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str container_id: The unique identifier of a site container. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteContainerEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'container_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_container" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `get_site_container`")  # noqa: E501
        # verify the required parameter 'container_id' is set
        if self.api_client.client_side_validation and ('container_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['container_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `container_id` when calling `get_site_container`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501
        if 'container_id' in local_var_params:
            path_params['containerId'] = local_var_params['container_id']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/containers/{containerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteContainerEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_membership(self, site_id, person_id, **kwargs):  # noqa: E501
        """Get a site membership  # noqa: E501

        Gets site membership information for person **personId** on site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_membership(site_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str person_id: The identifier of a person. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteMemberEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_site_membership_with_http_info(site_id, person_id, **kwargs)  # noqa: E501

    def get_site_membership_with_http_info(self, site_id, person_id, **kwargs):  # noqa: E501
        """Get a site membership  # noqa: E501

        Gets site membership information for person **personId** on site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_membership_with_http_info(site_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str person_id: The identifier of a person. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteMemberEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'person_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_membership" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `get_site_membership`")  # noqa: E501
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `get_site_membership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/members/{personId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteMemberEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_membership_for_person(self, person_id, site_id, **kwargs):  # noqa: E501
        """Get a site membership  # noqa: E501

        Gets site membership information for person **personId** on site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_membership_for_person(person_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteRoleEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_site_membership_for_person_with_http_info(person_id, site_id, **kwargs)  # noqa: E501

    def get_site_membership_for_person_with_http_info(self, person_id, site_id, **kwargs):  # noqa: E501
        """Get a site membership  # noqa: E501

        Gets site membership information for person **personId** on site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_membership_for_person_with_http_info(person_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteRoleEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_membership_for_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `get_site_membership_for_person`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `get_site_membership_for_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/people/{personId}/sites/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRoleEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_membership_request_for_person(self, person_id, site_id, **kwargs):  # noqa: E501
        """Get a site membership request  # noqa: E501

        Gets the site membership request for site **siteId** for person **personId**, if one exists.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_membership_request_for_person(person_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteMembershipRequestEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_site_membership_request_for_person_with_http_info(person_id, site_id, **kwargs)  # noqa: E501

    def get_site_membership_request_for_person_with_http_info(self, person_id, site_id, **kwargs):  # noqa: E501
        """Get a site membership request  # noqa: E501

        Gets the site membership request for site **siteId** for person **personId**, if one exists.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_membership_request_for_person_with_http_info(person_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteMembershipRequestEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'site_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_membership_request_for_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `get_site_membership_request_for_person`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `get_site_membership_request_for_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/people/{personId}/site-membership-requests/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteMembershipRequestEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_membership_requests(self, **kwargs):  # noqa: E501
        """Get site membership requests  # noqa: E501

        Get the list of site membership requests the user can action.  You can use the **where** parameter to filter the returned site membership requests by **siteId**. For example:  ``` (siteId=mySite) ```  The **where** parameter can also be used to filter by ***personId***. For example:  ``` where=(personId=person) ```  This may be combined with the siteId filter, as shown below:  ``` where=(siteId=mySite AND personId=person)) ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_membership_requests(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param str where: A string to restrict the returned objects by using a predicate.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteMembershipRequestWithPersonPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_site_membership_requests_with_http_info(**kwargs)  # noqa: E501

    def get_site_membership_requests_with_http_info(self, **kwargs):  # noqa: E501
        """Get site membership requests  # noqa: E501

        Get the list of site membership requests the user can action.  You can use the **where** parameter to filter the returned site membership requests by **siteId**. For example:  ``` (siteId=mySite) ```  The **where** parameter can also be used to filter by ***personId***. For example:  ``` where=(personId=person) ```  This may be combined with the siteId filter, as shown below:  ``` where=(siteId=mySite AND personId=person)) ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_membership_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param str where: A string to restrict the returned objects by using a predicate.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteMembershipRequestWithPersonPaging, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['skip_count', 'max_items', 'where', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_membership_requests" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'skip_count' in local_var_params and local_var_params['skip_count'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `skip_count` when calling `get_site_membership_requests`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'max_items' in local_var_params and local_var_params['max_items'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `max_items` when calling `get_site_membership_requests`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip_count' in local_var_params and local_var_params['skip_count'] is not None:  # noqa: E501
            query_params.append(('skipCount', local_var_params['skip_count']))  # noqa: E501
        if 'max_items' in local_var_params and local_var_params['max_items'] is not None:  # noqa: E501
            query_params.append(('maxItems', local_var_params['max_items']))  # noqa: E501
        if 'where' in local_var_params and local_var_params['where'] is not None:  # noqa: E501
            query_params.append(('where', local_var_params['where']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/site-membership-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteMembershipRequestWithPersonPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_site_containers(self, site_id, **kwargs):  # noqa: E501
        """List site containers  # noqa: E501

        Gets a list of containers for the site **siteId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_containers(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteContainerPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_site_containers_with_http_info(site_id, **kwargs)  # noqa: E501

    def list_site_containers_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """List site containers  # noqa: E501

        Gets a list of containers for the site **siteId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_containers_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteContainerPaging, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'skip_count', 'max_items', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_site_containers" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `list_site_containers`")  # noqa: E501

        if self.api_client.client_side_validation and 'skip_count' in local_var_params and local_var_params['skip_count'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `skip_count` when calling `list_site_containers`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'max_items' in local_var_params and local_var_params['max_items'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `max_items` when calling `list_site_containers`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []
        if 'skip_count' in local_var_params and local_var_params['skip_count'] is not None:  # noqa: E501
            query_params.append(('skipCount', local_var_params['skip_count']))  # noqa: E501
        if 'max_items' in local_var_params and local_var_params['max_items'] is not None:  # noqa: E501
            query_params.append(('maxItems', local_var_params['max_items']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/containers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteContainerPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_site_membership_requests_for_person(self, person_id, **kwargs):  # noqa: E501
        """List site membership requests  # noqa: E501

        Gets a list of the current site membership requests for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_membership_requests_for_person(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteMembershipRequestPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_site_membership_requests_for_person_with_http_info(person_id, **kwargs)  # noqa: E501

    def list_site_membership_requests_for_person_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """List site membership requests  # noqa: E501

        Gets a list of the current site membership requests for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_membership_requests_for_person_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteMembershipRequestPaging, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'skip_count', 'max_items', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_site_membership_requests_for_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `list_site_membership_requests_for_person`")  # noqa: E501

        if self.api_client.client_side_validation and 'skip_count' in local_var_params and local_var_params['skip_count'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `skip_count` when calling `list_site_membership_requests_for_person`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'max_items' in local_var_params and local_var_params['max_items'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `max_items` when calling `list_site_membership_requests_for_person`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501

        query_params = []
        if 'skip_count' in local_var_params and local_var_params['skip_count'] is not None:  # noqa: E501
            query_params.append(('skipCount', local_var_params['skip_count']))  # noqa: E501
        if 'max_items' in local_var_params and local_var_params['max_items'] is not None:  # noqa: E501
            query_params.append(('maxItems', local_var_params['max_items']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/people/{personId}/site-membership-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteMembershipRequestPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_site_memberships(self, site_id, **kwargs):  # noqa: E501
        """List site memberships  # noqa: E501

        Gets a list of site memberships for site **siteId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_memberships(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteMemberPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_site_memberships_with_http_info(site_id, **kwargs)  # noqa: E501

    def list_site_memberships_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """List site memberships  # noqa: E501

        Gets a list of site memberships for site **siteId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_memberships_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteMemberPaging, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'skip_count', 'max_items', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_site_memberships" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `list_site_memberships`")  # noqa: E501

        if self.api_client.client_side_validation and 'skip_count' in local_var_params and local_var_params['skip_count'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `skip_count` when calling `list_site_memberships`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'max_items' in local_var_params and local_var_params['max_items'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `max_items` when calling `list_site_memberships`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []
        if 'skip_count' in local_var_params and local_var_params['skip_count'] is not None:  # noqa: E501
            query_params.append(('skipCount', local_var_params['skip_count']))  # noqa: E501
        if 'max_items' in local_var_params and local_var_params['max_items'] is not None:  # noqa: E501
            query_params.append(('maxItems', local_var_params['max_items']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteMemberPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_site_memberships_for_person(self, person_id, **kwargs):  # noqa: E501
        """List site memberships  # noqa: E501

        Gets a list of site membership information for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.  You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.  Example to filter by **visibility**, use any one of:  ``` (visibility='PRIVATE') (visibility='PUBLIC') (visibility='MODERATED') ```  Example to filter by site **preset**:  ``` (preset='site-dashboard') ```  The default sort order for the returned list is for sites to be sorted by ascending title. You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * title * role   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_memberships_for_person(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] order_by: A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. 
        :param list[str] relations: Use the relations parameter to include one or more related entities in a single response.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param str where: A string to restrict the returned objects by using a predicate.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteRolePaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_site_memberships_for_person_with_http_info(person_id, **kwargs)  # noqa: E501

    def list_site_memberships_for_person_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """List site memberships  # noqa: E501

        Gets a list of site membership information for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.  You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.  Example to filter by **visibility**, use any one of:  ``` (visibility='PRIVATE') (visibility='PUBLIC') (visibility='MODERATED') ```  Example to filter by site **preset**:  ``` (preset='site-dashboard') ```  The default sort order for the returned list is for sites to be sorted by ascending title. You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * title * role   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_memberships_for_person_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] order_by: A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. 
        :param list[str] relations: Use the relations parameter to include one or more related entities in a single response.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param str where: A string to restrict the returned objects by using a predicate.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteRolePaging, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'skip_count', 'max_items', 'order_by', 'relations', 'fields', 'where']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_site_memberships_for_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `list_site_memberships_for_person`")  # noqa: E501

        if self.api_client.client_side_validation and 'skip_count' in local_var_params and local_var_params['skip_count'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `skip_count` when calling `list_site_memberships_for_person`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'max_items' in local_var_params and local_var_params['max_items'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `max_items` when calling `list_site_memberships_for_person`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501

        query_params = []
        if 'skip_count' in local_var_params and local_var_params['skip_count'] is not None:  # noqa: E501
            query_params.append(('skipCount', local_var_params['skip_count']))  # noqa: E501
        if 'max_items' in local_var_params and local_var_params['max_items'] is not None:  # noqa: E501
            query_params.append(('maxItems', local_var_params['max_items']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('orderBy', local_var_params['order_by']))  # noqa: E501
            collection_formats['orderBy'] = 'csv'  # noqa: E501
        if 'relations' in local_var_params and local_var_params['relations'] is not None:  # noqa: E501
            query_params.append(('relations', local_var_params['relations']))  # noqa: E501
            collection_formats['relations'] = 'csv'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'where' in local_var_params and local_var_params['where'] is not None:  # noqa: E501
            query_params.append(('where', local_var_params['where']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/people/{personId}/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRolePaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_sites(self, **kwargs):  # noqa: E501
        """List sites  # noqa: E501

        Gets a list of sites in this repository.  You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.  Example to filter by **visibility**, use any one of:  ``` (visibility='PRIVATE') (visibility='PUBLIC') (visibility='MODERATED') ```  Example to filter by site **preset**:  ``` (preset='site-dashboard') ```  The default sort order for the returned list is for sites to be sorted by ascending title. You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * title * description  You can use the **relations** parameter to include one or more related entities in a single response and so reduce network traffic.  The entity types in Alfresco are organized in a tree structure. The **sites** entity has two children, **containers** and **members**. The following relations parameter returns all the container and member objects related to each site:  ``` containers,members ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sites(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] order_by: A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. 
        :param list[str] relations: Use the relations parameter to include one or more related entities in a single response.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param str where: A string to restrict the returned objects by using a predicate.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SitePaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_sites_with_http_info(**kwargs)  # noqa: E501

    def list_sites_with_http_info(self, **kwargs):  # noqa: E501
        """List sites  # noqa: E501

        Gets a list of sites in this repository.  You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.  Example to filter by **visibility**, use any one of:  ``` (visibility='PRIVATE') (visibility='PUBLIC') (visibility='MODERATED') ```  Example to filter by site **preset**:  ``` (preset='site-dashboard') ```  The default sort order for the returned list is for sites to be sorted by ascending title. You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * title * description  You can use the **relations** parameter to include one or more related entities in a single response and so reduce network traffic.  The entity types in Alfresco are organized in a tree structure. The **sites** entity has two children, **containers** and **members**. The following relations parameter returns all the container and member objects related to each site:  ``` containers,members ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sites_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int skip_count: The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list.  If not supplied then the default value is 100. 
        :param list[str] order_by: A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. 
        :param list[str] relations: Use the relations parameter to include one or more related entities in a single response.
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param str where: A string to restrict the returned objects by using a predicate.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SitePaging, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['skip_count', 'max_items', 'order_by', 'relations', 'fields', 'where']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sites" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'skip_count' in local_var_params and local_var_params['skip_count'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `skip_count` when calling `list_sites`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'max_items' in local_var_params and local_var_params['max_items'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `max_items` when calling `list_sites`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip_count' in local_var_params and local_var_params['skip_count'] is not None:  # noqa: E501
            query_params.append(('skipCount', local_var_params['skip_count']))  # noqa: E501
        if 'max_items' in local_var_params and local_var_params['max_items'] is not None:  # noqa: E501
            query_params.append(('maxItems', local_var_params['max_items']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('orderBy', local_var_params['order_by']))  # noqa: E501
            collection_formats['orderBy'] = 'csv'  # noqa: E501
        if 'relations' in local_var_params and local_var_params['relations'] is not None:  # noqa: E501
            query_params.append(('relations', local_var_params['relations']))  # noqa: E501
            collection_formats['relations'] = 'csv'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'where' in local_var_params and local_var_params['where'] is not None:  # noqa: E501
            query_params.append(('where', local_var_params['where']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SitePaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reject_site_membership_request(self, site_id, invitee_id, **kwargs):  # noqa: E501
        """Reject a site membership request  # noqa: E501

        Reject a site membership request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reject_site_membership_request(site_id, invitee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str invitee_id: The invitee user name. (required)
        :param SiteMembershipRejectionBody site_membership_rejection_body: Rejecting a request to join, optionally, allows the inclusion of comment. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reject_site_membership_request_with_http_info(site_id, invitee_id, **kwargs)  # noqa: E501

    def reject_site_membership_request_with_http_info(self, site_id, invitee_id, **kwargs):  # noqa: E501
        """Reject a site membership request  # noqa: E501

        Reject a site membership request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reject_site_membership_request_with_http_info(site_id, invitee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str invitee_id: The invitee user name. (required)
        :param SiteMembershipRejectionBody site_membership_rejection_body: Rejecting a request to join, optionally, allows the inclusion of comment. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'invitee_id', 'site_membership_rejection_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reject_site_membership_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `reject_site_membership_request`")  # noqa: E501
        # verify the required parameter 'invitee_id' is set
        if self.api_client.client_side_validation and ('invitee_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['invitee_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `invitee_id` when calling `reject_site_membership_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501
        if 'invitee_id' in local_var_params:
            path_params['inviteeId'] = local_var_params['invitee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'site_membership_rejection_body' in local_var_params:
            body_params = local_var_params['site_membership_rejection_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/site-membership-requests/{inviteeId}/reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site(self, site_id, site_body_update, **kwargs):  # noqa: E501
        """Update a site  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Update the details for the given site **siteId**. Site Manager or otherwise a  (site) admin can update title, description or visibility.  Note: the id of a site cannot be updated once the site has been created.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site(site_id, site_body_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param SiteBodyUpdate site_body_update: The site information to update. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_site_with_http_info(site_id, site_body_update, **kwargs)  # noqa: E501

    def update_site_with_http_info(self, site_id, site_body_update, **kwargs):  # noqa: E501
        """Update a site  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Update the details for the given site **siteId**. Site Manager or otherwise a  (site) admin can update title, description or visibility.  Note: the id of a site cannot be updated once the site has been created.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_with_http_info(site_id, site_body_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param SiteBodyUpdate site_body_update: The site information to update. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'site_body_update', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `update_site`")  # noqa: E501
        # verify the required parameter 'site_body_update' is set
        if self.api_client.client_side_validation and ('site_body_update' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_body_update'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_body_update` when calling `update_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'site_body_update' in local_var_params:
            body_params = local_var_params['site_body_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site_membership(self, site_id, person_id, site_membership_body_update, **kwargs):  # noqa: E501
        """Update a site membership  # noqa: E501

        Update the membership of person **personId** in site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.  You can set the **role** to one of four types:  * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_membership(site_id, person_id, site_membership_body_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str person_id: The identifier of a person. (required)
        :param SiteMembershipBodyUpdate site_membership_body_update: The persons new role (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteMemberEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_site_membership_with_http_info(site_id, person_id, site_membership_body_update, **kwargs)  # noqa: E501

    def update_site_membership_with_http_info(self, site_id, person_id, site_membership_body_update, **kwargs):  # noqa: E501
        """Update a site membership  # noqa: E501

        Update the membership of person **personId** in site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.  You can set the **role** to one of four types:  * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_membership_with_http_info(site_id, person_id, site_membership_body_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str site_id: The identifier of a site. (required)
        :param str person_id: The identifier of a person. (required)
        :param SiteMembershipBodyUpdate site_membership_body_update: The persons new role (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteMemberEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['site_id', 'person_id', 'site_membership_body_update', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_membership" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `update_site_membership`")  # noqa: E501
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `update_site_membership`")  # noqa: E501
        # verify the required parameter 'site_membership_body_update' is set
        if self.api_client.client_side_validation and ('site_membership_body_update' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_membership_body_update'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_membership_body_update` when calling `update_site_membership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'site_membership_body_update' in local_var_params:
            body_params = local_var_params['site_membership_body_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/members/{personId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteMemberEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site_membership_request_for_person(self, person_id, site_id, site_membership_request_body_update, **kwargs):  # noqa: E501
        """Update a site membership request  # noqa: E501

        Updates the message for the site membership request to site **siteId** for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_membership_request_for_person(person_id, site_id, site_membership_request_body_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param SiteMembershipRequestBodyUpdate site_membership_request_body_update: The new message to display (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SiteMembershipRequestEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_site_membership_request_for_person_with_http_info(person_id, site_id, site_membership_request_body_update, **kwargs)  # noqa: E501

    def update_site_membership_request_for_person_with_http_info(self, person_id, site_id, site_membership_request_body_update, **kwargs):  # noqa: E501
        """Update a site membership request  # noqa: E501

        Updates the message for the site membership request to site **siteId** for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_membership_request_for_person_with_http_info(person_id, site_id, site_membership_request_body_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str person_id: The identifier of a person. (required)
        :param str site_id: The identifier of a site. (required)
        :param SiteMembershipRequestBodyUpdate site_membership_request_body_update: The new message to display (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SiteMembershipRequestEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'site_id', 'site_membership_request_body_update', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_membership_request_for_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if self.api_client.client_side_validation and ('person_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_id` when calling `update_site_membership_request_for_person`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if self.api_client.client_side_validation and ('site_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_id` when calling `update_site_membership_request_for_person`")  # noqa: E501
        # verify the required parameter 'site_membership_request_body_update' is set
        if self.api_client.client_side_validation and ('site_membership_request_body_update' not in local_var_params or  # noqa: E501
                                                        local_var_params['site_membership_request_body_update'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `site_membership_request_body_update` when calling `update_site_membership_request_for_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['personId'] = local_var_params['person_id']  # noqa: E501
        if 'site_id' in local_var_params:
            path_params['siteId'] = local_var_params['site_id']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'site_membership_request_body_update' in local_var_params:
            body_params = local_var_params['site_membership_request_body_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/people/{personId}/site-membership-requests/{siteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteMembershipRequestEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
